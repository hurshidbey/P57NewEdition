# Protokol57 Nginx Configuration with Fixed Caching
# This configuration ensures users get fresh HTML while keeping efficient caching for assets

server {
    listen 80;
    server_name p57.birfoiz.uz srv852801.hstgr.cloud;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name p57.birfoiz.uz srv852801.hstgr.cloud;

    ssl_certificate /etc/letsencrypt/live/p57.birfoiz.uz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/p57.birfoiz.uz/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Health check endpoint
    location /health {
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_cache off;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        access_log off;
    }

    # API endpoints
    location /api {
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # No caching for API responses
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # WebSocket support for HMR in development
    location /ws {
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Root location - serves the React app
    location / {
        proxy_pass http://localhost:5001;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CRITICAL: No caching for HTML files
        location ~* \.html?$ {
            proxy_pass http://localhost:5001;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header X-Cache-Status "HTML-NO-CACHE";
            etag on;
        }
        
        # Cache static assets with content hash in filename
        location ~* \.(js|css|map)$ {
            proxy_pass http://localhost:5001;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status "STATIC-CACHED";
        }
        
        # Cache images and fonts
        location ~* \.(jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|otf)$ {
            proxy_pass http://localhost:5001;
            expires 30d;
            add_header Cache-Control "public";
            add_header X-Cache-Status "ASSET-CACHED";
        }
        
        # Default for other files
        try_files $uri $uri/ /index.html;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/javascript application/xml application/json;
    gzip_disable "MSIE [1-6]\.";

    # Logging
    access_log /var/log/nginx/protokol57.access.log;
    error_log /var/log/nginx/protokol57.error.log;
}